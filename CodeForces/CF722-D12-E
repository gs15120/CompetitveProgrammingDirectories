/*
If the rover passes more then 20 cells with anomaly, the battery will be always 1.
If the rover goes from (x1,y1) to (x2,y2) ,
    if(x1<=x2 && y1<=y2) there will be (x2-x1+y2-y1)!/((x2-x1)!*(y2-y1)!) cases.
    else 0 cases.
if dp[i][j] the cases of going to j-th anomaly cell after passing i-1 anomaly cells.
Make dp table using dp[i][j]=SUM((dp[i-1][s]-dp[i][s])*(cases from j to s)) s is j+1 to k.
*/
#include <bits/stdc++.h>
using namespace std;
//using lint = long long;

struct P
{
    int x,y,z;

    bool operator<(const P &a)const{
              return z>a.z;
    }

};

vector<int> v;

//bitset<4001000> b;
int a,i,b,n,d,c,m,k;


long long o[211111];
long long l[211111];
long long dp[2222][2362];
long long j[3333][2222];
int e;


int dx[10]={2,2,-2,-2,1,1,-1,-1},dy[10]={1,-1,1,-1,2,-2,2,-2};

//int dx[10]={0,1,0,-1,1,1,-1,-1},dy[10]={1,0,-1,0,1,-1,1,-1},dz[10]={0,0,0,0,1,-1};
long long mod=1000000007,mod2=1000000009,mod3=2017;
long long x,z,y;
double pi=3.14159265;
P u[3221];
stack<int> s;
//set<int> s[222][22];
queue<int> q;

//2147483647
//'1'==49;
//'A'==65;
//'a'==97;
//unordered_
//map<int,int> p,p1;
/*
struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};
unordered_map<long long, int, custom_hash> safe_map;
*/
//list<int> l;

//string r1,r2;
//char r[333][333];
//deque<int> de;
//srand((int)time(NULL));
bool as(P a,P b)
{
    if(a.x!=b.x)
    return a.x<b.x;
    return a.y<b.y;
}

long long f(long long x,long long y)
{
    long long z=1;
    for(;y;x*=x,x%=mod,y/=2)
        if(y%2) z*=x,z%=mod;
    return z;
}

int main()
{
    scanf("%d %d %d %d",&a,&b,&c,&d);
    o[0]=l[0]=1;
    for(int t=1;t<=a+b;t++)
        o[t]=o[t-1]*t%mod,l[t]=f(o[t],mod-2);
    for(int t=1;t<=c;t++)
        scanf("%d %d",&u[t].x,&u[t].y);
    sort(u+1,u+c+1,as);
    c++;
    u[c]={a,b};
    u[0]={1,1};
    for(int t=0;t<=c;t++)
        for(int w=t;w<=c;w++)
    {
        int x=u[w].x-u[t].x,y=u[w].y-u[t].y;
        if(x>=0&&y>=0)
        j[t][w]=o[x+y]*l[x]%mod*l[y]%mod;
    }
    dp[0][c]=1;
    for(int i=1;i<=20;i++)
        for(int h=c-1;h>=0;h--)
    for(int p=h+1;p<=c;p++)
    {
        dp[i][h]+=dp[i-1][p]*j[h][p]%mod;
        dp[i][h]-=dp[i][p]*j[h][p]%mod;
        dp[i][h]%=mod;
        dp[i][h]+=mod;
        dp[i][h]%=mod;
    }
    x=o[a+b-2]*l[a-1]%mod*l[b-1]%mod;
    for(int i=0;i<=20;i++)
    {
        //if(dp[i+1][0]) puts("$$");
        //if(dp[i+1][0]*(d-1)) printf("&&&&%lld\n",dp[i+1][0]*(d-1));
        x+=dp[i+1][0]*(d-1)%mod;
        d++;
        d/=2;
        x%=mod;
    }
    x*=f(o[a+b-2]*l[a-1]%mod*l[b-1]%mod,mod-2);
    x%=mod;
    printf("%lld",x);
}


