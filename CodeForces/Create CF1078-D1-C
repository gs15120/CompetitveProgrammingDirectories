/*
http://codeforces.com/blog/entry/63324
*/
#include <bits/stdc++.h>
using namespace std;
//using lint = long long;

struct P
{
    int x,y,z;

    bool operator<(const P &a)const{
              return y>a.y;
    }
};

vector<int> v[311111];

//bitset<4001000> b;
int a,i,b,n,d,c,m,k;


long long o[311111][4];
int l[311111];


int e;


int dx[10]={2,2,-2,-2,1,1,-1,-1},dy[10]={1,-1,1,-1,2,-2,2,-2};

//int dx[10]={0,1,0,-1,1,1,-1,-1},dy[10]={1,0,-1,0,1,-1,1,-1},dz[10]={0,0,0,0,1,-1};
long long mod=998244353,mod2=1000000009,mod3=2017;
long long x,z,y;
double pi=3.14159265;
P u[411113];
stack<int> s;
//set<int> s[222][22];
//priority_queue<S> q;
queue<int> q;

long long g(long long n,long long m)
{
    long long x=1;
    for(;m;m/=2,n*=n,n%=mod)
        if(m%2) x*=n,x%=mod;
    return x;
}

long long f(int n,int m)
{
    if(o[n][m]>=0) return o[n][m];
    //printf("%d %d\n",n,m);
    o[n][m]=1;
    if(m==0)
    {
        long long x=1;
        for(int h=0;h<v[n].size();h++)
        if(l[n]!=v[n][h])
        o[n][m]*=f(v[n][h],0),x*=(f(v[n][h],0)+f(v[n][h],2))%mod,x%=mod,o[n][m]%=mod;
        for(int h=0;h<v[n].size();h++)
        if(l[n]!=v[n][h])
        {
            long long z=x*g((f(v[n][h],0)+f(v[n][h],2))%mod,mod-2)%mod*f(v[n][h],1)%mod;
            o[n][m]+=z;
            o[n][m]%=mod;
        }
        return o[n][m];
    }
    if(m==1)
    {
        for(int h=0;h<v[n].size();h++)
            if(l[n]!=v[n][h]) o[n][m]*=(f(v[n][h],0)+f(v[n][h],2))%mod,o[n][m]%=mod;
        return o[n][m];
    }
    o[n][m]=0;
    long long x=1;
    for(int h=0;h<v[n].size();h++)
    if(l[n]!=v[n][h])
    x*=(f(v[n][h],0)+f(v[n][h],2))%mod,x%=mod;
    for(int h=0;h<v[n].size();h++)
    if(l[n]!=v[n][h])
    {
        long long z=x*g((f(v[n][h],0)+f(v[n][h],2))%mod,mod-2)%mod*f(v[n][h],1)%mod;
        o[n][m]+=z;
        o[n][m]%=mod;
    }
    return o[n][m];
}

int main()
{
    memset(o,-1,sizeof(o));
    scanf("%d",&a);
    for(int t=1;t<a;t++)
    {
        scanf("%d %d",&n,&m);
        v[n].push_back(m);
        v[m].push_back(n);
    }
    memset(l,-1,sizeof(l));
    l[1]=0;
    q.push(1);
    for(;q.size();q.pop())
    for(int h=0;h<v[q.front()].size();h++)
    if(l[v[q.front()][h]]<0)
    {
        l[v[q.front()][h]]=q.front();
        q.push(v[q.front()][h]);
    }
    //puts("#");
    printf("%lld",f(1,0));
}
