/*

I found every pathes using knight, bishop, rook using flowed warshell.
It doesn't need more then 3 to move from a to a+1. Change to rook and two moves always can make it at 3 times.
So, it doesn't need two changes to move from a to a+1.
Now, just found the anwser using dp.
Since answer will be less then 300, it can know be easier by adding 1000 at every steps and adding 1 at every changes. 

*/
#include <bits/stdc++.h>
using namespace std;
//using lint = long long;

struct P
{
    int x,y,z;

    bool operator<(const P &a)const{
              return z>a.z;
    }

};

vector<int> v[5];

//bitset<4001000> b;
int a,i,b,n,d,c,m,k;

int o[222][111];
int l[13][221][111],j[222][111];
int e;
int sd[222][222];

int dx[10]={2,2,-2,-2,1,1,-1,-1},dy[10]={1,-1,1,-1,2,-2,2,-2};

//int dx[10]={0,1,0,-1,1,1,-1,-1},dy[10]={1,0,-1,0,1,-1,1,-1},dz[10]={0,0,0,0,1,-1};
long long mod=998244353,mod2=1000000009,mod3=2017;
long long x,z,y;
double pi=3.14159265;
P u[511];
stack<int> s;
//set<int> s[222][22];
queue<int> q,q1;

//2147483647
//'1'==49;
//'A'==65;
//'a'==97;
//unordered_
//map<long long,int> p;
//list<int> l;

//string r;
char r[1];
//deque<int> de;
//srand((int)time(NULL));
bool as(P a,P b)
{
    return a.z<b.z;
}

int g(int c,int h)
{
    int n=u[c].x+dx[h],m=u[c].y+dy[h];
    if(1<=n&&n<=a&&1<=m&&m<=a)
    {
        return o[n][m];
    }
    return 0;
}

int op(int n,int m)
{
    P a=u[n],b=u[m];
    if((a.x+a.y)%2!=(b.x+b.y)%2) return 0;
    if(a.x+a.y==b.x+b.y||a.x-a.y==b.x-b.y) return 1;
    return 2;
}

int f(int c,int n)
{
    if(n==a*a+1) return 0;
    
    if(sd[c][n]>=0) return sd[c][n];
    
    sd[c][n]=7654321;
    for(int p=1;p<=3;p++)
        if(l[p][n-1][n]<1000)
    {
        int d=0;
        if(c!=p) d=1001;
        sd[c][n]=min(sd[c][n],f(p,n+1)+l[p][n-1][n]*1000+d);
       
    }
    for(int i=1;i<=3;i++)
        for(int t=1;t<=3;t++)
        for(int k=1;k<=a*a;k++)
    if(l[i][n-1][k]<1000&&l[t][k][n]<1000)
    {
        int m=0;
        if(i!=c) m+=1001;
        if(i!=t) m+=1001;
        sd[c][n]=min(sd[c][n],f(t,n+1)+(l[i][n-1][k]+l[t][k][n])*1000+m);
        
    }
    return sd[c][n];
}

int main()
{

    scanf("%d",&a);
    for(int t=0;t<a;t++)
        for(int w=0;w<a;u[o[t+1][w+1]]={t+1,w+1},w++)
        scanf("%d",&o[t+1][w+1]);
    for(int t=1;t<=a*a;t++)
        for(int w=1;w<=a*a;w++)
            for(int p=1;p<=3;l[p][t][w]=6543215,l[p][w][w]=0,p++)
    for(int t=1;t<=a*a;t++)
    {
        for(int h=0;h<8;h++)
        if(g(t,h))
        l[1][t][g(t,h)]=1;
        for(int w=1;w<=a*a;w++)
        {
            if(t!=w&&(u[t].x==u[w].x||u[t].y==u[w].y))
            l[3][t][w]=1;
            if(t!=w&&(u[t].x+u[t].y==u[w].x+u[w].y||u[t].x-u[t].y==u[w].x-u[w].y))
                l[2][t][w]=1;
        }
    }
    for(int h=1;h<=a*a;h++)
        for(int i=1;i<=a*a;i++)
        for(int q=1;q<=a*a;q++)
        for(int p=1;p<=3;p++)
        l[p][i][q]=min(l[p][i][q],l[p][i][h]+l[p][h][q]);
memset(sd,-1,sizeof(sd));

    n=min(f(1,2),min(f(2,2),f(3,2)));
 
    printf("%d %d",n/1000,n%1000);
}
