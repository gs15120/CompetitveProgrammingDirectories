/*
If a,b is different

There will be a fastest different bit. Let it is the ith bit.
We can find i like...
    1. ask a,b after changing the jth bit.
    2. if a,b's order relation is same as before, j<i.
    3. else, j==i.
We can know which one's ith bit is 1 because we already know the order relation of a,b.
To know the 1~i-1th bit, ask a,(b after changing jth bit). If a>b it will be 1 or it will be 0.
Now, take away 1~i bits at a,b and do it again two will be same.


If a,b are same

Ask a,(b after changing jth bit). If a>b it will be 1 or it will be 0.
Do it untill we know the holl a,b.



*/
#include <bits/stdc++.h>
using namespace std;
//using lint = long long;

struct P
{
    int x,y;

    bool operator<(const P &a)const{
        if(x!=a.x)
              return x>a.x;
        return y>a.y;
    }

};

vector<int> v;

//bitset<4001000> b;
int a,i,b,n,d,c,m,k;


int o[2221];
int l[2221];
int j[1];
int e;


//int dx[10]={2,2,-2,-2,1,1,-1,-1},dy[10]={1,-1,1,-1,2,-2,2,-2};

int dx[10]={0,1,0,-1,1,1,-1,-1},dy[10]={1,0,-1,0,1,-1,1,-1},dz[10]={0,0,0,0,1,-1};
long long mod=1000000007,mod2=1000000009,mod3=2017;
long long x,z,y;
double pi=3.14159265;
P u[2];
stack<int> s;
//set<int> s[222][22];
priority_queue<int,vector<int>,greater<int> > q;
//queue<int> q;
//2147483647
//'1'==49;
//'A'==65;
//'a'==97;
//unordered_
//map<int,int> p,p1;
/*
struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};
unordered_map<long long, int, custom_hash> safe_map;
*/
//list<int> l;

string r2;
char r[13];
//deque<int> de;
//srand((int)time(NULL));
/*bool as(P a,P b)
{
    if(a.x!=b.x)
    return a.x<b.x;
    return a.y<b.y;
}*/

bool as(P a,P b)
{
    if(a.x!=b.x)
    return a.x<b.x;
    return a.y<b.y;
}

int f(int n,int m)
{
    e++;
    printf("? %d %d\n",n,m);
    fflush(stdout);
    int d=0;
    /*if((n^((1<<30)-1))>(m^0))
    return 1;
    if((n^((1<<30)-1))==(m^0))
    return 0;
    return -1;
    */
    scanf("%d",&d);
    return d;
}

int main()
{
    c=f(0,0);
    for(int i=29;i>=0;)
    {
        if(c==0)
        {
            if(f(n,m+(1<<i))>0) n+=(1<<i),m+=(1<<i);
            i--;
        }
        else if(c<0)
        {

            int p=i;
            for(;f(n+(1<<p),m+(1<<p))<=0;p--);
            for(int t=i;t>p;t--)
            {
                if(f(n,m+(1<<t))>0) n+=(1<<t),m+=(1<<t);
            }
            m+=(1<<p);
            i=p-1;
            c=f(n,m);
        }
        else
        {
            //puts("#");
            int p=i;
            for(;f(n+(1<<p),m+(1<<p))>=0;p--);
            for(int t=i;t>p;t--)
            {
                if(f(n,m+(1<<t))>0) n+=(1<<t),m+=(1<<t);
            }
            n+=(1<<p);
            i=p-1;
            c=f(n,m);
        }
    }
    printf("! %d %d\n",n,m);
    //printf("%d %d",e,(1<<30)-1);
    fflush(stdout);
}



