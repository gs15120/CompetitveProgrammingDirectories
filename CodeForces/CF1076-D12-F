/*
http://codeforces.com/blog/entry/63151
*/

#include <bits/stdc++.h>
using namespace std;
//using lint = long long;

struct P
{
    int x,y,z;

    bool operator<(const P &a)const{
              return y>a.y;
    }

};

struct S
{
    int x;
    long long y;

    bool operator<(const S &a)const{
              return y>a.y;
    }

};

vector<int> v[33];

//bitset<4001000> b;
int a,i,b,n,d,c,m,k;


int o[333331];
int l[333333][3];
int j[2331];
int e;


int dx[10]={2,2,-2,-2,1,1,-1,-1},dy[10]={1,-1,1,-1,2,-2,2,-2};

//int dx[10]={0,1,0,-1,1,1,-1,-1},dy[10]={1,0,-1,0,1,-1,1,-1},dz[10]={0,0,0,0,1,-1};
long long mod=1000000007,mod2=1000000009,mod3=2017;
long long x,z,y;
double pi=3.14159265;
P u[333333];
stack<int> s;
//set<int> s[222][22];
//priority_queue<S> q;
queue<int> q1;
//2147483647
//'1'==49;
//'A'==65;
//'a'==97;
//unordered_
//map<int,int> p,p1;
/*
struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};
unordered_map<long long, int, custom_hash> safe_map;
*/
//list<int> l;

//string r;
//char r[3333][3];
//deque<int> de;
//srand((int)time(NULL));
/*bool as(P a,P b)
{
    if(a.x!=b.x)
    return a.x<b.x;
    return a.y<b.y;
}*/

bool as(P a,P b)
{
    if(a.x!=b.x)
    return a.x<b.x;
    return a.y>b.y;
}

int f(int n,int m,int c,int d)
{
    long long k=11987654;
    if(n<=b)
    {
        int e=c;
        if(e>d)
        {
            e-=min(e-d,b-n);
        }
        if((long long)(b)*e>=d)
        k=min(k,max((long long)1,(long long)e-(long long)(d-1)*b));
    }
    if(m<=b)
    {
        int e=d;
        if(e>c-1)
            e-=min(e-c+1,b-m);
        if((long long)(b)*(c-1)>=e)
            k=min(k,max((long long)1,(long long)c-(long long)e*b));
    }
    return k;
}

int main()
{
    scanf("%d %d",&a,&b);
    for(int t=1;t<=a;t++)
        scanf("%d",&u[t].x);
    for(int t=1;t<=a;l[t][0]=l[t][1]=b+1,t++)
        scanf("%d",&u[t].y);
    for(int t=1;t<=a;t++)
    {
        l[t][0]=f(l[t-1][0],l[t-1][1],u[t].x,u[t].y);
        l[t][1]=f(l[t-1][1],l[t-1][0],u[t].y,u[t].x);
        //printf("%d %d\n",l[t][0],l[t][1]);
    }

    if(l[a][0]<=b||l[a][1]<=b) puts("YES");
    else puts("NO");
}


