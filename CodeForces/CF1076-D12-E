/*
http://codeforces.com/blog/entry/63151
*/

#include <bits/stdc++.h>
using namespace std;
//using lint = long long;

struct P
{
    int x,y,z;

    bool operator<(const P &a)const{
              return y>a.y;
    }

};

struct S
{
    int x;
    long long y;

    bool operator<(const S &a)const{
              return y>a.y;
    }

};

vector<int> v[333333];
vector<P> v1[333333];
//bitset<4001000> b;
int a,i,b,n,d,c,m,k;


long long o[1332221];
long long l[333533];
int j[2331];
int e;
int op[333333];

int dx[10]={2,2,-2,-2,1,1,-1,-1},dy[10]={1,-1,1,-1,2,-2,2,-2};

//int dx[10]={0,1,0,-1,1,1,-1,-1},dy[10]={1,0,-1,0,1,-1,1,-1},dz[10]={0,0,0,0,1,-1};
long long mod=1000000007,mod2=1000000009,mod3=2017;
long long x,z,y;
double pi=3.14159265;
P u[3];
stack<int> s;
//set<int> s[222][22];
//priority_queue<S> q;
queue<int> q1;
//2147483647
//'1'==49;
//'A'==65;
//'a'==97;
//unordered_
//map<int,int> p,p1;
/*
struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};
unordered_map<long long, int, custom_hash> safe_map;
*/
//list<int> l;

//string r;
//char r[3333][3];
//deque<int> de;
//srand((int)time(NULL));
/*bool as(P a,P b)
{
    if(a.x!=b.x)
    return a.x<b.x;
    return a.y<b.y;
}*/

bool as(P a,P b)
{
    if(a.x!=b.x)
    return a.x<b.x;
    return a.y>b.y;
}

long long g(int m)
{
    long long x=0;
    for(;m;m/=2)
    {
        //if(n%2) x+=o[n],n++;
        //else if(m%2==0)
            x+=o[m];//,m--;
       // else n/=2,m/=2;
    }
    return x;//+o[n];
}

void f(int n,int p,int m)
{
    for(int h=0;h<v1[n].size();h++)
    {
        int c=m+i-1,d=m+i-1+v1[n][h].x;
        for(;c<d;)
        {
            if(c%2) o[c]+=v1[n][h].y,c++;
            else if(d%2==0) o[d]+=v1[n][h].y,d--;
            else c/=2,d/=2;
        }
        o[c]+=v1[n][h].y;
    }
    for(int h=0;h<v[n].size();h++)
        if(v[n][h]!=p)
        f(v[n][h],n,m+1);
    for(int h=m+i-1;h;l[n]+=o[h],h/=2);
    for(int h=0;h<v1[n].size();h++)
    {
        int c=m+i-1,d=m+i-1+v1[n][h].x;
        for(;c<d;)
        {
            if(c%2) o[c]-=v1[n][h].y,c++;
            else if(d%2==0) o[d]-=v1[n][h].y,d--;
            else c/=2,d/=2;
        }
        o[c]-=v1[n][h].y;
    }
}

int main()
{
    scanf("%d",&a);
    for(int t=1;t<a;t++)
    {
        scanf("%d %d",&n,&m);
        v[n].push_back(m);
        v[m].push_back(n);
    }
    scanf("%d",&b);
    for(int t=1;t<=b;t++)
    {
        scanf("%d %d %d",&n,&m,&c);
        v1[n].push_back({min(m,a-1),c});
    }
    for(i=1;i<a;i*=2);
    f(1,0,1);
    for(int t=1;t<=a;t++)
        printf("%lld ",l[t]);
}


