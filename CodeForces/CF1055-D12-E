/*
http://codeforces.com/blog/entry/63099
*/

#include <bits/stdc++.h>
using namespace std;
//using lint = long long;

struct P
{
    int x,y,z;

    bool operator<(const P &a)const{
              return y>a.y;
    }

};

struct S
{
    int x;
    long long y;

    bool operator<(const S &a)const{
              return y>a.y;
    }

};

vector<P> v;

//bitset<4001000> b;
int a,i,b,n,d,c,m,k;


int o[2221];
int l[1533][1531];
int j[2331];
int e;
int op[333333];

int dx[10]={2,2,-2,-2,1,1,-1,-1},dy[10]={1,-1,1,-1,2,-2,2,-2};

//int dx[10]={0,1,0,-1,1,1,-1,-1},dy[10]={1,0,-1,0,1,-1,1,-1},dz[10]={0,0,0,0,1,-1};
long long mod=1000000007,mod2=1000000009,mod3=2017;
long long x,z,y;
double pi=3.14159265;
P u[3];
stack<int> s;
//set<int> s[222][22];
priority_queue<S> q;
queue<int> q1;
//2147483647
//'1'==49;
//'A'==65;
//'a'==97;
//unordered_
//map<int,int> p,p1;
/*
struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};
unordered_map<long long, int, custom_hash> safe_map;
*/
//list<int> l;

//string r;
//char r[3333][3];
//deque<int> de;
//srand((int)time(NULL));
/*bool as(P a,P b)
{
    if(a.x!=b.x)
    return a.x<b.x;
    return a.y<b.y;
}*/

bool as(P a,P b)
{
    if(a.x!=b.x)
    return a.x<b.x;
    return a.y>b.y;
}

int main()
{
    scanf("%d %d %d %d",&a,&b,&c,&d);
    for(int t=1;t<=a;t++)
        scanf("%d",&o[t]);
    for(int t=1;t<=b;t++)
        scanf("%d %d",&u[t].x,&u[t].y);
    sort(u+1,u+1+b,as);
    i=1;
    for(int t=1;t<=b;t++)
    {
        if(u[t].y>u[i].y) i++,u[i]=u[t];
    }
    //printf("%d %d %d",i,u[1].x,u[1].y);
    b=i;
    c=min(c,b);
    n=1,m=1000000010;
    for(;n<m;)
    {
        int h=(n+m)/2;
        for(int t=1;t<=a;t++)
        {
            if(o[t]<=h) j[t]=1;
            else j[t]=0;
            j[t]+=j[t-1];
        }
        memset(l,0,sizeof(l));
        k=0;
        for(int t=1;t<=b;t++)
        {
            int p=t;
            for(;p&&u[p].y>=u[t].x;p--);
            for(int w=1;w<=b;w++)
                l[t][w]=l[t-1][w];
            for(int w=1;w<=b;w++)
            {
                l[t][w]=max(l[t][w],l[p][w-1]+j[u[t].y]-j[u[t].x-1]);
                l[t][w]=max(l[t][w],l[p+1][w-1]+j[u[t].y]-j[u[p+1].y]);
            }
            for(int h=1;h<=c;h++)
                k=max(k,l[t][h]);
        }
        //printf("%d %d\n",h,k);
        if(k>=d) m=h;
        else n=h+1;
    }
    if(n>1000000000) puts("-1");
    else printf("%d",n);
}
