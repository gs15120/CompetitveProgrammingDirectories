/*
https://codeforces.com/blog/entry/63384
*/

#include <bits/stdc++.h>
using namespace std;
//using lint = long long;

struct P
{
    int x,y;

    bool operator<(const P &a)const{
        if(x!=a.x)
              return x>a.x;
        return y>a.y;
    }

};

vector<int> v[1];

//bitset<4001000> b;
int a,i,b,n,d,c,m,k;


int o[111111];
int l[1111111];
int j[1];
int e;


//int dx[10]={2,2,-2,-2,1,1,-1,-1},dy[10]={1,-1,1,-1,2,-2,2,-2};

int dx[10]={0,1,0,-1,1,1,-1,-1},dy[10]={1,0,-1,0,1,-1,1,-1},dz[10]={0,0,0,0,1,-1};
long long mod=1000000007,mod2=1000000009,mod3=2017;
long long x,z,y;
double pi=3.14159265;
P u[1];
stack<int> s;
//set<int> s[222][22];
priority_queue<int> q1;
priority_queue<P> q;
//2147483647
//'1'==49;
//'A'==65;
//'a'==97;
//unordered_
//map<int,int> p,p1;
/*
struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};
unordered_map<long long, int, custom_hash> safe_map;
*/
//list<int> l;

//string r;
//char r[3333][3];
//deque<int> de;
//srand((int)time(NULL));
/*bool as(P a,P b)
{
    if(a.x!=b.x)
    return a.x<b.x;
    return a.y<b.y;
}*/

bool as(P a,P b)
{
    if(a.x!=b.x)
    return a.x<b.x;
    return a.y>b.y;
}

int main()
{
    scanf("%d %d %d",&a,&b,&c);
    for(int t=1;t<=a;t++)
    {
        scanf("%d %d",&n,&m);
        q.push({n,m});
    }
    for(;q.size();)
    {
        P x=q.top();
        q.pop();
        if(x.y==1987654321)
            q1.push(x.x);
        else
        {
            if(q1.size()==0||(long long)(c)*(x.x-q1.top())>b)
            {
                for(;q1.size();q1.pop());//{
                    //printf("$$$%d %d\n",x.y,q1.top());
               // }
            }
            if(q1.size())
            {
                z+=(long long)(c)*(x.y-q1.top())%mod;
                z%=mod;
                q1.pop();
                q.push({x.y,1987654321});
            }
            else
            {
                z+=b+(long long)c*(x.y-x.x)%mod;
                z%=mod;
                q.push({x.y,1987654321});
            }
        }
    }
    printf("%lld",z);
}
