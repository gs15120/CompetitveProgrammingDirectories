/*
Note that a junction can be happy only when the number of colors is at least the number of leaves in it.
The rule is that this is the only condition needed: indeed, if we color the leaves cyclically in the order of Euler tour, all such junctions will be happy.
So the answer for the number of colors is simply the number of junctions that have at most c leaves in the subtree
*/

#include <bits/stdc++.h>
using namespace std;
//using lint = long long;

struct P
{
    int x,y;

    bool operator<(const P &a)const{
        if(x!=a.x)
              return x>a.x;
        return y>a.y;
    }

};

vector<int> v;

//bitset<4001000> b;
int a,i,b,n,d,c,m,k;


int o[2111];
int l[2221];
int j[2221];
int e;


//int dx[10]={2,2,-2,-2,1,1,-1,-1},dy[10]={1,-1,1,-1,2,-2,2,-2};

int dx[10]={0,1,0,-1,1,1,-1,-1},dy[10]={1,0,-1,0,1,-1,1,-1},dz[10]={0,0,0,0,1,-1};
long long mod=1000000007,mod2=1000000009,mod3=2017;
long long x,z,y;
double pi=3.14159265;
P u[1];
stack<int> s;
//set<int> s[222][22];
//priority_queue<int> q1;
queue<P> q;
//2147483647
//'1'==49;
//'A'==65;
//'a'==97;
//unordered_
//map<int,int> p,p1;
/*
struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};
unordered_map<long long, int, custom_hash> safe_map;
*/
//list<int> l;

//string r;
char r[33];
//deque<int> de;
//srand((int)time(NULL));
/*bool as(P a,P b)
{
    if(a.x!=b.x)
    return a.x<b.x;
    return a.y<b.y;
}*/

bool as(P a,P b)
{
    if(a.x!=b.x)
    return a.x<b.x;
    return a.y>b.y;
}


int main()
{
    scanf("%d %d",&a,&b);
    a*=2;
    for(int t=1;t<=a;t++)
        scanf("%d",&o[t]);
    for(int t=1;t<=b;t++)
    {
        scanf("%d %d",&n,&m);
        l[n]=m;
        l[m]=n;
        if(o[n]>o[m])
        q.push({n,m});
        else q.push({m,n});
    }
    n=0;
    scanf("%d",&i);
    for(int t=0;t<a;t++)
    {
        if((t+i)%2)
        {
            //puts("!");
        if(l[n]==0||(j[l[n]]==1))
        {
            for(;q.size();q.pop())
            {
                if(j[q.front().x]==0)
                {
                    j[q.front().x]=1;
                    n=q.front().x;
                    printf("%d\n",n);
                    fflush(stdout);
                    q.pop();
                    goto qwe;
                }
            }
            c=d=0;
            for(int t=1;t<=a;t++)
                if(j[t]==0&&c<o[t]) c=o[t],d=t;
            j[d]=1;
            printf("%d\n",d);
            fflush(stdout);
            qwe:;
        }
        else
        {
            j[l[n]]=1;
            printf("%d\n",l[n]);
            fflush(stdout);
        }
        }
        else
        {
            scanf("%d",&n);
            j[n]=1;
        }
    }
}
