/*

First, it's easy to know that making size 1 component is always possible, and size n is always impossible.
Also, we can make size i component if and only if we can make size n-i component.
(If we make size i component by removing an edge, the left part of tree's size will be n-i)
If the string does not argue it, I found how to make the tree.
To make size i component, you should make a vertex that has exactly i-1 vertices under it.
The other way, there r should be no vertex that has exactly i-1 verctices under it to never make the size i component


*/



#include <bits/stdc++.h>
using namespace std;
//using lint = long long;

struct P
{
    int x, y;

    bool operator<(const P &a)const{
              return y>a.y;
    }

};


//vector<P> v[100100];
vector<int> v;
//bitset<4001000> b;
int a,c,i,b,n,m,k,d;//dy[15]={0,1,0,-1,-1,1,-1,1},dx[15]={1,0,-1,0,1,1,-1,-1};//
int o[111111];
int l[111111];
//int z1[1000100],z2[1000100];
int j[1];
int e[1];

int dx[10]={0,1,0,-1,1,1,-1,-1},dy[10]={1,0,-1,0,1,-1,1,-1},dz[10]={0,0,0,0,1,-1};
long long x,y,mod=1000000007,mod2=1000000009,mod3=2017;
long long z;
double pi=3.14159265;
P u[1];
//stack<int> s;

//set<long long> s;
queue<int> q;

//2147483647
//'1'==49;
//'A'==65;
//'a'==97;
//unordered_
//map<long long,int> p;
//list<int> l;

string r;
//char r[1100222],r1[1101000];
//deque<int> de;
//srand((int)time(NULL));


bool as(P a,P b)
{
    if(a.x!=b.x)
    return a.x<b.x;
    return a.y<b.y;
}


int main()
{
    cin>>r;
    if(r[r.size()-1]=='1'||r[0]=='0')
    {
        puts("-1");
        return 0;
    }
    for(int i=0,j=(int)r.size()-2;i<j;i++,j--)
    {
        if(r[i]!=r[j])
        {
            puts("-1");
            return 0;
        }
    }
    n=r.size()/2-1;
    for(int i=n;i>0;i--) 
     if(r[i]=='1'&&m==0) m=i+1;
    if(!m) m=1;
    
    
    
    //print the tree
    printf("%d %d\n",m+1,m);
    for(int i=m+1;i<r.size();i++)
        printf("%d %d\n",m+1,i+1);
    for(int i=m;i>1;i--)
    {
        for(int j=i-2;j>=0;j--)
        {
            printf("%d %d\n",i,j+1);
            if(r[j]=='1')
            {
                i=j+2;
                break;
            }
        }
    }
}
