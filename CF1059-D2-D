/*
Binary search to find the minimum radius.
The y coordinate will be same as the radius, find the range of x coordinate.
If x is accept, the radius will be accept.
*/
#include <bits/stdc++.h>
using namespace std;
//using lint = long long;

struct P
{
    int x,y,z;

    bool operator<(const P &a)const{
              return z>a.z;
    }

};

vector<int> v;

//bitset<4001000> b;
int a,i,b,n,d,c,m,k;

double o[111111];
double l[111112];
int j[1];
int e;

int dx[10]={0,1,0,-1,1,1,-1,-1},dy[10]={1,0,-1,0,1,-1,1,-1},dz[10]={0,0,0,0,1,-1};
long long mod=1000000007,mod2=1000000009,mod3=2017;
double x,z,y;
double pi=3.14159265;
P u[111111];
stack<int> s;
//set<int> s[222][22];
queue<int> q,q1;

//2147483647
//'1'==49;
//'A'==65;
//'a'==97;
//unordered_
//map<int,int> p;
//list<int> l;

//string r;
char r[1222][1111];
//deque<int> de;
//srand((int)time(NULL));
bool as(P a,P b)
{
    return a.z<b.z;
}

int main()
{
    scanf("%d",&a);
    for(int t=1;t<=a;t++)
        scanf("%d %d",&u[t].x,&u[t].y);
    for(int t=1;t<=a;t++)
    {
        if(u[t].y<0) u[t].y*=-1,i=1;
        else n=1;
    }
    if(i&&n)
    {
        puts("-1");
        return 0;
    }
    x=0,y=987654321987654321;
    for(int s=1;s<=200;s++)
    {
        z=(x+y)/2;
        for(int t=1;t<=a;t++)
        {
            if(u[t].y>2*z) o[t]=1,l[t]=-1;
            else
            {
                o[t]=u[t].x-sqrt(2*z-u[t].y)*sqrt(u[t].y);
                l[t]=u[t].x+sqrt(2*z-u[t].y)*sqrt(u[t].y);
            }
        }
        double n=-987654321987654321;
        double m=-n;
        for(int t=1;t<=a;t++)
        {
            n=max(n,o[t]),m=min(m,l[t]);
            if(n>m)
            {
               // puts("#");
                x=z;
                goto qwe;
            }
        }
        d=1;
        y=z;
        qwe:;

    }
    //if(d==1) puts("-1");
    //else
    printf("%lf\n",y);
}
